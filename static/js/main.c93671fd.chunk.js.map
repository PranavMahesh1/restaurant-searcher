{"version":3,"sources":["components/HomePage/SearchResults/index.js","components/HomePage/index.js","components/Details/index.js","App.js","serviceWorker.js","index.js"],"names":["SearchResults","props","history","useHistory","displayRating","item","n","max","emptyStars","Math","ceil","stars","Number","floor","i","push","color","j","Restaurants","restaurantsList","map","key","Card","className","height","Img","variant","src","image_url","Body","style","Title","name","Text","price","prices","length","displayPrice","rating","display_phone","Button","onClick","detailsObject","restaurantDetails","margin","Container","Row","anywhere","API_KEY","HomePage","useState","restaurant","setRestaurant","location","setLocation","setRestaurantsList","geoLocation","setGeoLocation","geo","navigator","geolocation","useEffect","getCurrentPosition","position","console","log","coords","latitude","longitude","err","Col","xs","Form","Group","controlId","Label","InputGroup","Prepend","id","Control","onChange","event","target","value","placeholder","axios","get","headers","Authorization","then","res","data","businesses","catch","Checkbox","aria-label","FormControl","GoogleApiWrapper","apiKey","useLocation","state","showingInfoWindow","setShowInfoWindow","activeMarker","setActiveMarker","setSelectedPlace","Cuisines","categories","title","ImageSlide","photos","Carousel","Item","overflow","alt","backgroundPosition","mapStyles2","width","timeConvert","time","formatedTime","toString","match","padding","Header","google","containerStyle","zoom","initialCenter","lat","coordinates","lng","marker","e","visible","onClose","marginTop","Tabs","defaultActiveKey","Tab","eventKey","review_count","rel","href","url","address1","city","zip_code","phone","hourList","day","hours","open","filter","start","end","Table","striped","bordered","hover","displayHours","App","path","Boolean","window","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yUAyGeA,G,MA/FO,SAACC,GACnB,IAAIC,EAAUC,cAiBb,IAAMC,EAAgB,SAACC,GACpB,IATaC,EASPC,EAAMF,EACNG,EAAa,EAAIC,KAAKC,KAAKH,GAC7BI,EAAQ,GACZ,GAZaL,EAYDC,EAXLK,OAAON,KAAOA,GAAKA,EAAI,IAAM,EAWlB,CAEhB,IADA,IAAMO,EAAQJ,KAAKI,MAAMN,GAChBO,EAAI,EAAGA,GAAKD,EAAOC,IAC1BH,EAAMI,KAAK,kBAAC,IAAD,CAAWC,MAAM,YAE9BL,EAAMI,KAAK,kBAAC,IAAD,CAAeC,MAAM,iBAEhC,IAAK,IAAIF,EAAI,EAAGA,GAAKP,EAAKO,IACxBH,EAAMI,KAAK,kBAAC,IAAD,CAAWC,MAAM,YAKhC,IADA,IAAIC,EAAI,EACDA,GAAKT,GACVG,EAAMI,KAAK,kBAAC,IAAD,CAAkBC,MAAM,YACnCC,IAEF,OAAON,GAgBPO,EAAcjB,EAAMkB,gBAAgBC,KAAI,SAACf,EAAMgB,GAAP,OACxC,kBAACC,EAAA,EAAD,CAAMD,IAAKA,EAAKE,UAAU,cAAcC,OAAO,OAC3C,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKtB,EAAKuB,UAAWJ,OAAO,QACpD,kBAACF,EAAA,EAAKO,KAAN,CAAWC,MAAO,CACdN,OAAQ,QAER,kBAACF,EAAA,EAAKS,MAAN,KAAa1B,EAAK2B,MAClB,kBAACV,EAAA,EAAKW,KAAN,MAIA,kBAACX,EAAA,EAAKW,KAAN,KAxBW,SAAC5B,EAAMgB,GAC1B,IAAMa,EAAQ7B,EACV8B,EAAS,GACb,GAAa,MAATD,EAAe,CACjBC,EAAOpB,KAAK,0BAAMM,IAAKA,GAAX,YACZ,IAAK,IAAIP,EAAI,EAAGA,EAAIoB,EAAME,OAAQtB,IAChCqB,EAAOpB,KAAK,kBAAC,IAAD,CAAcC,MAAM,WAGpC,OAAOmB,EAeaE,CAAahC,EAAK6B,MAAOb,IACrC,kBAACC,EAAA,EAAKW,KAAN,gBAAoB7B,EAAcC,EAAKiC,SACvC,kBAAChB,EAAA,EAAKW,KAAN,KAAW,kBAAC,IAAD,CAAcjB,MAAM,YAA/B,IAA6CX,EAAKkC,gBAItD,kBAACC,EAAA,EAAD,CAAQC,QACJ,YAtEZ,SAA2BpC,GACvBH,EAAQa,KAAK,WAAY,CAErB2B,cAAerC,IAoEPsC,CAAkBtC,IACnBqB,QAAQ,UAAUI,MAAO,CACxBc,OAAQ,QAJhB,wBASR,OACI,6BACI,6BACA,kBAACC,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,CAAKvB,UAAU,6BAEVL,OCtFf6B,EAAW,uCAGXC,EAAU,mIAgIDC,EA7HE,SAAChD,GAAU,MAEUiD,mBAAS,IAFnB,mBAEnBC,EAFmB,KAEPC,EAFO,OAGMF,mBAAS,IAHf,mBAGnBG,EAHmB,KAGTC,EAHS,OAIoBJ,mBAAS,IAJ7B,mBAInB/B,EAJmB,KAIFoC,EAJE,OAKYL,mBAAS,IALrB,mBAKnBM,EALmB,KAKNC,EALM,OAMYP,qBANZ,mBAQlBQ,GARkB,UAQZC,UAAUC,aAetBC,qBAAU,WAbDH,EAGDA,EAAII,oBAAmB,SAACC,GAEpBC,QAAQC,IAAI,aAAcF,EAASG,OAAOC,SAAUJ,EAASG,OAAOE,WACpEX,EAAeM,EAASG,WACzB,SAACG,OANJL,QAAQC,IAAI,6CAcjB,IA0CH,OACI,6BACI,kBAACpB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKvB,UAAU,6BACX,kBAAC+C,EAAA,EAAD,CAAKC,GAAG,KACJ,wBAAIhD,UAAU,WAAd,uBACA,uBAAGA,UAAU,QAAb,mIAEA,kBAACiD,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,SAClB,kBAACF,EAAA,EAAKG,MAAN,CAAYpD,UAAU,QAAtB,8BAEA,kBAACqD,EAAA,EAAD,KACI,kBAACA,EAAA,EAAWC,QAAZ,KACI,kBAACD,EAAA,EAAW3C,KAAZ,CAAiB6C,GAAG,qBAAoB,kBAAC,IAAD,QAE5C,kBAACN,EAAA,EAAKO,QAAN,CAAcC,SAvDnB,SAACC,GACxB7B,EAAc6B,EAAMC,OAAOC,QAsD6CC,YAAY,iBAIhE,kBAACZ,EAAA,EAAKC,MAAN,CAAYC,UAAU,SAClB,kBAACF,EAAA,EAAKG,MAAN,CAAYpD,UAAU,QAAtB,kBAEA,kBAACqD,EAAA,EAAD,KACI,kBAACA,EAAA,EAAWC,QAAZ,KACI,kBAACD,EAAA,EAAW3C,KAAZ,CAAiB6C,GAAG,qBAAoB,kBAAC,IAAD,QAE5C,kBAACN,EAAA,EAAKO,QAAN,CAAcC,SA7DrB,SAACC,GACtB3B,EAAY2B,EAAMC,OAAOC,QA4D6CC,YAAY,mCAMlE,kBAAC5C,EAAA,EAAD,CAAQd,QAAQ,QAAQe,QA/CnB,SAACwC,GAEtBI,IAAMC,IAAN,UAAavC,EAAb,0DAAuEI,EAAvE,qCAA8GE,GAAY,CACtHkC,QAAS,CACLC,cAAc,UAAD,OAAYxC,MAE9ByC,MAAK,SAACC,GAELnC,EAAmBmC,EAAIC,KAAKC,eAC7BC,OAAM,SAACxB,GAENL,QAAQC,IAAI,kBAAmBI,QAoCnB,UACA,kBAAC7B,EAAA,EAAD,CAAQd,QAAQ,QAAQe,QAhEhB,SAACwC,GAEzBI,IAAMC,IAAN,UAAavC,EAAb,0DAAuEI,EAAvE,qCAA8GK,EAAYW,SAA1H,sBAAgJX,EAAYY,UAA5J,iBAAsL,CAClLmB,QAAS,CACLC,cAAc,UAAD,OAAYxC,MAG9ByC,MAAK,SAACC,GAELnC,EAAmBmC,EAAIC,KAAKC,eAC7BC,OAAM,SAACxB,GAENL,QAAQC,IAAI,kBAAmBI,OAoDmC9C,UAAU,eAAhE,6BACA,kBAACqD,EAAA,EAAD,CAAYrD,UAAU,QACd,kBAACqD,EAAA,EAAWC,QAAZ,KACI,kBAACD,EAAA,EAAWkB,SAAZ,CAAqBC,aAAW,uCAEpC,kBAACC,EAAA,EAAD,CAAaD,aAAW,8BAE5B,kBAACnB,EAAA,EAAD,CAAYrD,UAAU,QAClB,kBAACqD,EAAA,EAAWC,QAAZ,KACI,kBAACD,EAAA,EAAWkB,SAAZ,CAAqBC,aAAW,uCAEpC,kBAACC,EAAA,EAAD,CAAaD,aAAW,gCAOvC5E,EAAgBiB,OAAS,EAAI,kBAAC,EAAD,CAAejB,gBAAiBA,IAAsB,Q,4CCoQrF8E,6BAAiB,CAC9BC,OAAO,GAAD,OAvXa,4CAsXND,EApXC,SAAChG,GAGf,IAAIoD,EAAW8C,cAHU,EAKSjD,mBAASG,EAAS+C,MAAM1D,eALjC,mBAKpBS,EALoB,KAKRC,EALQ,OAMoBF,oBAAS,GAN7B,mBAMpBmD,EANoB,KAMDC,EANC,OAOapD,mBAAS,IAPtB,mBAOpBqD,EAPoB,KAONC,EAPM,OAQetD,mBAAS,IARxB,mBAQLuD,GARK,WAWzB5C,qBAAU,WACRwB,IAAMC,IAAN,UApBa,uCAoBb,8CAA2DnC,EAAW2B,IAAM,CAC1ES,QAAS,CACPC,cAAc,UAAD,OAnBA,uIAqBdC,MAAK,SAACC,GAEP1B,QAAQC,IAAI,oBAAqByB,EAAIC,MACrCvC,EAAcsC,EAAIC,SACjBE,OAAM,SAACxB,GAERL,QAAQC,IAAI,kBAAmBI,QAEhC,IAGH,IAAIqC,EAAWvD,EAAWwD,WAAWvF,KAAI,SAACf,EAAMgB,GAAP,OACvC,0BAAMA,IAAKA,GAAMhB,EAAKuG,MAAtB,SAIEC,EAAa1D,EAAW2D,QAAU3D,EAAW2D,OAAO1F,KAAI,SAACf,EAAMgB,GAAP,OAC1D,kBAAC0F,EAAA,EAASC,KAAV,KACE,yBAAKlF,MAAO,CACVmF,SAAU,SACVzF,OAAQ,UAGR,yBACED,UAAU,gBACVI,IAAKtB,EACL6G,IAAI,aACJ7F,IAAKA,EACLS,MAAO,CACLqF,mBAAoB,wBAoBxBC,EAAa,CACjBC,MAAO,OACP7F,OAAQ,QACRuC,SAAU,YAWZ,IA4KMuD,EAAc,SAACC,GAGnB,IAAIC,EAAe,GAInB,OALAD,EAAOA,EAAKE,WAAWC,MAAM,8BAEpBtF,OAAS,IAChBoF,GAAgBD,EAAK,GAAK,IAAM,IAAM,IAAMA,EAAK,IAAMA,EAAK,GAAK,GAAK,MAAQ,QAEzEC,GAgBT,OACE,6BACE,kBAAC3E,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAKvB,UAAU,6BACb,kBAACD,EAAA,EAAD,CAAMQ,MAAO,CACXuF,MAAO,SAEP,kBAAC/F,EAAA,EAAKO,KAAN,CAAWC,MAAO,CAChB6F,QAAS,WAET,kBAACZ,EAAA,EAAD,KAAWF,MAIjB,6BAGA,kBAAC/D,EAAA,EAAD,CAAKvB,UAAU,6BACb,kBAACD,EAAA,EAAD,CAAMQ,MAAO,CACXuF,MAAO,SAEP,kBAAC/F,EAAA,EAAKsG,OAAN,KACE,gCAAQ,4BAAKzE,EAAWnB,QAE1B,kBAACV,EAAA,EAAKO,KAAN,CAAWC,MAAO,CAChB6F,QAAS,SAET,kBAAC,MAAD,CACEE,OAAQ5H,EAAM4H,OACd/F,MAAOsF,EACPU,eAAgBV,EAChBW,KAAM,GACNC,cAAe,CACbC,IAAK9E,EAAW+E,YAAY/D,SAC5BgE,IAAKhF,EAAW+E,YAAY9D,YAG9B,kBAAC,SAAD,CACEwC,MAAK,UAAKzD,EAAWnB,MACrBA,KAAI,UAAKmB,EAAWnB,MACpBS,QAvQM,SAACxC,EAAOmI,EAAQC,GACpC5B,EAAiBxG,GACjBuG,EAAgB4B,GAChB9B,GAAkB,IAqQJvC,SAAU,CAAEkE,IAAK9E,EAAW+E,YAAY/D,SAAUgE,IAAKhF,EAAW+E,YAAY9D,aAEhF,kBAAC,aAAD,CACEgE,OAAQ7B,EACR+B,QAASjC,EACTkC,QAvQA,SAAAtI,GACVoG,IACFG,EAAgB,MAChBF,GAAkB,MAsQN,4BAAKnD,EAAWnB,WAQ1B,kBAACc,EAAA,EAAD,CAAKhB,MAAO,CACV0G,UAAW,SAEX,kBAAClH,EAAA,EAAD,CAAMQ,MAAO,CACXuF,MAAO,SAEP,kBAAC/F,EAAA,EAAKsG,OAAN,2BACA,kBAACtG,EAAA,EAAKO,KAAN,KACE,kBAAC4G,EAAA,EAAD,CAAMC,iBAAiB,UAAU5D,GAAG,4BAClC,kBAAC6D,EAAA,EAAD,CAAK7G,MAAO,CACV6F,QAAS,QACRiB,SAAS,UAAUhC,MAAM,WAC1B,wCAAcF,GAEd,2BApFK,WACnB,IAAMxE,EAAQiB,EAAWjB,MACrBC,EAAS,GACb,GAAa,MAATD,EAAe,CACjBC,EAAOpB,KAAK,0CACZ,IAAK,IAAID,EAAI,EAAGA,EAAIoB,EAAME,OAAQtB,IAChCqB,EAAOpB,KAAK,kBAAC,IAAD,CAAcC,MAAM,WAGpC,OAAOmB,EA4EUE,IAEH,sCA7QM,WACpB,IATe/B,EASTC,EAAM4C,EAAWb,OACjB9B,EAAa,EAAIC,KAAKC,KAAKH,GAC7BI,EAAQ,GACZ,GAZeL,EAYHC,EAXLK,OAAON,KAAOA,GAAKA,EAAI,IAAM,EAWlB,CAEhB,IADA,IAAMO,EAAQJ,KAAKI,MAAMN,GAChBO,EAAI,EAAGA,GAAKD,EAAOC,IAC1BH,EAAMI,KAAK,kBAAC,IAAD,CAAWC,MAAM,YAE9BL,EAAMI,KAAK,kBAAC,IAAD,CAAeC,MAAM,iBAEhC,IAAK,IAAIF,EAAI,EAAGA,GAAKP,EAAKO,IACxBH,EAAMI,KAAK,kBAAC,IAAD,CAAWC,MAAM,YAKhC,IADA,IAAIC,EAAI,EACDA,GAAKT,GACVG,EAAMI,KAAK,kBAAC,IAAD,CAAkBC,MAAM,YACnCC,IAEF,OAAON,EAwPmBP,GAAZ,IAA8B+C,EAAW0F,aAAzC,YACA,uBAAGnH,QAAQ,kBAAkBwD,OAAO,SAAS4D,IAAI,sBAAsBC,KAAM5F,EAAW6F,KAAK,kBAACxG,EAAA,EAAD,CAAQd,QAAQ,mBAAhB,eAE/F,kBAACiH,EAAA,EAAD,CAAK7G,MAAO,CACV6F,QAAS,QACRiB,SAAS,UAAUhC,MAAM,mBAC1B,2BAAG,kBAAC,IAAD,CAAc5F,MAAM,YAAvB,IAAsE,KAAjCmC,EAAWE,SAAS4F,SAApB,oBAAmD9F,EAAWE,SAAS4F,SAAvE,aAAoF9F,EAAWE,SAAS6F,KAAxG,aAAiH/F,EAAWE,SAAS+C,MAArI,YAA8IjD,EAAWE,SAAS8F,UAAlK,oBAA4LhG,EAAWE,SAAS6F,KAAhN,aAAyN/F,EAAWE,SAAS+C,MAA7O,YAAsPjD,EAAWE,SAAS8F,WAC/S,2BAAG,kBAAC,IAAD,CAAcnI,MAAM,YAAvB,IAAoC,uBAAG+H,KAAI,cAAS5F,EAAWiG,QAAUjG,EAAWZ,iBAEtF,kBAACoG,EAAA,EAAD,CAAK7G,MAAO,CACV6F,QAAS,QACRiB,SAAS,QAAQhC,MAAM,cACxB,2BAjQG,WACjB,IAAIyC,EAAW,GACXC,EAAM,GACV,GAAInG,EAAWoG,OAASpG,EAAWoG,MAAM,GAAGC,KAAM,CAChD,IAAMD,EAAQpG,EAAWoG,MAAM,GAAGC,KAC7BD,EAAME,QAAO,SAAApJ,GAAI,OAAiB,IAAbA,EAAKiJ,OAAYlH,OAAS,GAElDkH,EAAMC,EAAME,QAAO,SAAApJ,GAAI,OAAiB,IAAbA,EAAKiJ,OAChCD,EAAStI,KACP,4BACE,sCACA,4BAAKuG,EAAYgC,EAAI,GAAGI,OAAxB,MAAmCpC,EAAYgC,EAAI,GAAGK,SAI1DN,EAAStI,KACP,4BACE,sCACA,wBAAIe,MAAO,CACTd,MAAO,QADT,YAMDuI,EAAME,QAAO,SAAApJ,GAAI,OAAiB,IAAbA,EAAKiJ,OAAYlH,OAAS,GAClDkH,EAAMC,EAAME,QAAO,SAAApJ,GAAI,OAAiB,IAAbA,EAAKiJ,OAChCD,EAAStI,KACP,4BACE,uCACA,4BAAKuG,EAAYgC,EAAI,GAAGI,OAAxB,MAAmCpC,EAAYgC,EAAI,GAAGK,SAI1DN,EAAStI,KACP,4BACE,uCACA,wBAAIe,MAAO,CACTd,MAAO,QADT,YAMDuI,EAAME,QAAO,SAAApJ,GAAI,OAAiB,IAAbA,EAAKiJ,OAAYlH,OAAS,GAClDkH,EAAMC,EAAME,QAAO,SAAApJ,GAAI,OAAiB,IAAbA,EAAKiJ,OAChCD,EAAStI,KACP,4BACE,yCACA,4BAAKuG,EAAYgC,EAAI,GAAGI,OAAxB,MAAmCpC,EAAYgC,EAAI,GAAGK,SAI1DN,EAAStI,KACP,4BACE,yCACA,wBAAIe,MAAO,CACTd,MAAO,QADT,YAMDuI,EAAME,QAAO,SAAApJ,GAAI,OAAiB,IAAbA,EAAKiJ,OAAYlH,OAAS,GAClDkH,EAAMC,EAAME,QAAO,SAAApJ,GAAI,OAAiB,IAAbA,EAAKiJ,OAChCD,EAAStI,KACP,4BACE,wCACA,4BAAKuG,EAAYgC,EAAI,GAAGI,OAAxB,MAAmCpC,EAAYgC,EAAI,GAAGK,SAI1DN,EAAStI,KACP,4BACE,wCACA,wBAAIe,MAAO,CACTd,MAAO,QADT,YAMDuI,EAAME,QAAO,SAAApJ,GAAI,OAAiB,IAAbA,EAAKiJ,OAAYlH,OAAS,GAClDkH,EAAMC,EAAME,QAAO,SAAApJ,GAAI,OAAiB,IAAbA,EAAKiJ,OAChCD,EAAStI,KACP,4BACE,sCACA,4BAAKuG,EAAYgC,EAAI,GAAGI,OAAxB,MAAmCpC,EAAYgC,EAAI,GAAGK,SAI1DN,EAAStI,KACP,4BACE,sCACA,wBAAIe,MAAO,CACTd,MAAO,QADT,YAMDuI,EAAME,QAAO,SAAApJ,GAAI,OAAiB,IAAbA,EAAKiJ,OAAYlH,OAAS,GAClDkH,EAAMC,EAAME,QAAO,SAAApJ,GAAI,OAAiB,IAAbA,EAAKiJ,OAChCD,EAAStI,KACP,4BACE,wCACA,4BAAKuG,EAAYgC,EAAI,GAAGI,OAAxB,MAAmCpC,EAAYgC,EAAI,GAAGK,SAI1DN,EAAStI,KACP,4BACE,wCACA,wBAAIe,MAAO,CACTd,MAAO,QADT,YAMDuI,EAAME,QAAO,SAAApJ,GAAI,OAAiB,IAAbA,EAAKiJ,OAAYlH,OAAS,GAClDkH,EAAMC,EAAME,QAAO,SAAApJ,GAAI,OAAiB,IAAbA,EAAKiJ,OAChCD,EAAStI,KACP,4BACE,sCACA,4BAAKuG,EAAYgC,EAAI,GAAGI,OAAxB,MAAmCpC,EAAYgC,EAAI,GAAGK,SAI1DN,EAAStI,KACP,4BACE,sCACA,wBAAIe,MAAO,CACTd,MAAO,QADT,YAOR,OACE,kBAAC4I,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,mCACA,uCAGJ,+BACGV,IAmHWW,c,QCtWPC,MApBf,WAEE,OAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,YACV,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UCNUC,QACW,cAA7BC,OAAO/G,SAASgH,UAEe,UAA7BD,OAAO/G,SAASgH,UAEhBD,OAAO/G,SAASgH,SAAS3C,MACvB,2DCZN4C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmB9G,WACrBA,UAAU+G,cAAcC,MACrBlF,MAAK,SAAAmF,GACJA,EAAaC,gBAEdhF,OAAM,SAAAiF,GACL9G,QAAQ8G,MAAMA,EAAMC,a","file":"static/js/main.c93671fd.chunk.js","sourcesContent":["// The component that appears when you click 'Submit' on the main page.\r\n\r\nimport React, { } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button, Card, Container, Row } from 'react-bootstrap';\r\nimport { IoIosStarHalf, IoIosStarOutline, IoIosStar } from 'react-icons/io';\r\nimport { FaDollarSign } from 'react-icons/fa';\r\nimport { MdLocalPhone, MdLocationOn } from 'react-icons/md';\r\nimport './style.css';\r\n\r\nconst SearchResults = (props) => {\r\n    let history = useHistory();\r\n    \r\n    function restaurantDetails(item) {\r\n        history.push('/details', {\r\n            // Link to /details and pass in detailsObject as a prop, which contains item\r\n            detailsObject: item\r\n        });\r\n    }\r\n\r\n    function isFloat(n) {\r\n        return Number(n) === n && n % 1 !== 0;\r\n      }\r\n    \r\n      /* Function that takes the rating and converts it to stars.\r\n         Accounts for if the rating is between a whole number and that plus 0.5,\r\n         but may not be necessary for the Yelp API.\r\n      */\r\n     const displayRating = (item) => {\r\n        const max = item;\r\n        const emptyStars = 5 - Math.ceil(max);\r\n        let stars = [];\r\n        if (isFloat(max)) {\r\n          const floor = Math.floor(max);\r\n          for (let i = 1; i <= floor; i++) {\r\n            stars.push(<IoIosStar color=\"orange\" />);\r\n          }\r\n          stars.push(<IoIosStarHalf color=\"orange\" />);\r\n        } else {\r\n          for (let i = 1; i <= max; i++) {\r\n            stars.push(<IoIosStar color=\"orange\" />);\r\n          }\r\n        }\r\n    \r\n        let j = 1;\r\n        while (j <= emptyStars) {\r\n          stars.push(<IoIosStarOutline color=\"orange\" />);\r\n          j++;\r\n        }\r\n        return stars;\r\n      }\r\n\r\n      const displayPrice = (item, key) => {\r\n        const price = item;\r\n        let prices = [];\r\n        if (price != null) {\r\n          prices.push(<span key={key}>Price: </span>);\r\n          for (let i = 0; i < price.length; i++) {\r\n            prices.push(<FaDollarSign color=\"green\" />);\r\n          }\r\n        }\r\n        return prices;\r\n      }\r\n\r\n    // Map function to loop through the array of items and displays a card for each restaurant\r\n    let Restaurants = props.restaurantsList.map((item, key) =>\r\n        <Card key={key} className=\"card-margin\" height=\"300\">\r\n            <Card.Img variant=\"top\" src={item.image_url} height=\"250\" />\r\n            <Card.Body style={{\r\n                height: '240'\r\n            }}>\r\n                <Card.Title>{item.name}</Card.Title>\r\n                <Card.Text>\r\n                    {/* If item does not have address1, don't display it  */}\r\n                    {/* {item.location.address1 !== \"\" ? <MdLocationOn color=\"#e53935\" /> + `${item.location.address1}, ${item.location.city}, ${item.location.state} ${item.location.zip_code}` : <MdLocationOn color=\"#e53935\" /> + `${item.location.city}, ${item.location.state} ${item.location.zip_code}`} */}\r\n                </Card.Text>\r\n                <Card.Text>{displayPrice(item.price, key)}</Card.Text>\r\n                <Card.Text>Rating: {displayRating(item.rating)}</Card.Text>\r\n                <Card.Text><MdLocalPhone color=\"#e53935\" /> {item.display_phone}</Card.Text>\r\n                {/* Make sure in most cases that the button will align \r\n                to the bottom and won't cover up phone number */}\r\n            </Card.Body>\r\n            <Button onClick={\r\n                () => {\r\n                    restaurantDetails(item);\r\n                }} variant=\"success\" style={{\r\n                    margin: '4px'\r\n                }}>More information</Button>\r\n        </Card>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <br />\r\n            <Container>\r\n                {/* Center row */}\r\n                <Row className=\"justify-content-md-center\">\r\n                    {/* The cards that will display the restaurant information */}\r\n                    {Restaurants}\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchResults;","// The component for the home page.\r\n// Loading screen\r\n// Search for one restaurant - don't show others\r\n// Instructions\r\n// Geolocation only if press button\r\nimport axios from 'axios';\r\nimport './style.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, Col, Container, Form, FormControl, InputGroup, Row } from 'react-bootstrap';\r\nimport SearchResults from './SearchResults';\r\nimport { MdLocationCity, MdRestaurant } from \"react-icons/md\";\r\n\r\nconst anywhere = 'https://cors-anywhere.herokuapp.com/';\r\n\r\n// Enter your own Yelp Fusion API key here\r\nconst API_KEY = 'yR15w8bu1wHsBvCaLBOTjSE19XdcT0rwnd9CUAkRENxiBHBqkfNj2sAkTx-yzkY4n146e_nXFAo43nQlwWSp3xxCHpoO8kzwBY_aE9OklcwvTEc3x3zEdUdP-epSXnYx';\r\n\r\n// Function for the homepage\r\nconst HomePage = (props) => {\r\n    // Define states\r\n    let [restaurant, setRestaurant] = useState(\"\");\r\n    let [location, setLocation] = useState(\"\");\r\n    let [restaurantsList, setRestaurantsList] = useState([]);\r\n    let [geoLocation, setGeoLocation] = useState({});\r\n    let [priceFilter, setPriceFilter] = useState();\r\n    \r\n    const geo = navigator.geolocation;\r\n    let getLocation = () => {\r\n        if (!geo) {\r\n            console.log(\"Location API is not supported/available\");\r\n        } else {\r\n            geo.getCurrentPosition((position) => {\r\n                // success callback\r\n                console.log(\"Location: \", position.coords.latitude, position.coords.longitude);\r\n                setGeoLocation(position.coords);\r\n            }, (err) => {\r\n\r\n            })\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getLocation();\r\n    }, []);\r\n\r\n    // Set the restaurant text in the restaurant state\r\n    const onChangeRestaurant = (event) => {\r\n        setRestaurant(event.target.value);\r\n    }\r\n\r\n    // Set the location text in the location state\r\n    const onChangeLocation = (event) => {\r\n        setLocation(event.target.value);\r\n    }\r\n\r\n    const searchGeoRestaurant = (event) => {\r\n        // Send a GET request to the Yelp API and filter businesses to food\r\n        axios.get(`${anywhere}https://api.yelp.com/v3/businesses/search?term=${restaurant}&categories=food&latitude=${geoLocation.latitude}&longitude=${geoLocation.longitude}&radius=15000`, {\r\n            headers: {\r\n                Authorization: `Bearer ${API_KEY}`\r\n            }\r\n            // save price in state\r\n        }).then((res) => {\r\n            // Set business array in restaurantsList state\r\n            setRestaurantsList(res.data.businesses);\r\n        }).catch((err) => {\r\n            // Otherwise catch error and log it to console\r\n            console.log(\"Error occured: \", err);\r\n        })\r\n    }\r\n\r\n    const searchRestaurant = (event) => {\r\n        // Send a GET request to the Yelp API and filter businesses to food\r\n        axios.get(`${anywhere}https://api.yelp.com/v3/businesses/search?term=${restaurant}&categories=food&location=${location}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${API_KEY}`\r\n            }\r\n        }).then((res) => {\r\n            // Set business array in restaurantsList state\r\n            setRestaurantsList(res.data.businesses);\r\n        }).catch((err) => {\r\n            // Otherwise catch error and log it to console\r\n            console.log(\"Error occured: \", err);\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Row className=\"justify-content-md-center\">\r\n                    <Col xs=\"6\">\r\n                        <h1 className=\"heading\">Restaurant-Searcher</h1>\r\n                        <p className=\"text\">Enter the restaurant type/name and location and click Submit, or enter just the restaurant and click Submit with Your Location.</p>\r\n                        {/* Form for entering Restaurant Name and Location */}\r\n                        <Form>\r\n                            <Form.Group controlId=\"basic\">\r\n                                <Form.Label className=\"text\">Enter Restaurant Name/Type</Form.Label>\r\n                                {/* When Form text changes, call onChangeRestaurant() */}\r\n                                <InputGroup>\r\n                                    <InputGroup.Prepend>\r\n                                        <InputGroup.Text id=\"inputGroupPrepend\"><MdRestaurant /></InputGroup.Text>\r\n                                    </InputGroup.Prepend>\r\n                                    <Form.Control onChange={onChangeRestaurant} placeholder=\"Restaurant\" />\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"basic\">\r\n                                <Form.Label className=\"text\">Enter Location</Form.Label>\r\n                                {/* When Form text changes, call onChangeLocation() */}\r\n                                <InputGroup>\r\n                                    <InputGroup.Prepend>\r\n                                        <InputGroup.Text id=\"inputGroupPrepend\"><MdLocationCity /></InputGroup.Text>\r\n                                    </InputGroup.Prepend>\r\n                                    <Form.Control onChange={onChangeLocation} placeholder=\"Location (i.e. Atlanta, GA)\" />\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n                        </Form>\r\n\r\n                        {/* When button is pressed, call searchRestaurant() */}\r\n                        <Button variant=\"light\" onClick={searchRestaurant}>Submit</Button>\r\n                        <Button variant=\"light\" onClick={searchGeoRestaurant} className=\"float-right\">Submit with Your Location</Button>\r\n                        <InputGroup className=\"mb-3\">\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Checkbox aria-label=\"Checkbox for following text input\" />\r\n                                </InputGroup.Prepend>\r\n                                <FormControl aria-label=\"Text input with checkbox\" />\r\n                            </InputGroup>\r\n                            <InputGroup className=\"mb-3\">\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Checkbox aria-label=\"Checkbox for following text input\" />\r\n                                </InputGroup.Prepend>\r\n                                <FormControl aria-label=\"Text input with checkbox\" />\r\n                            </InputGroup>\r\n                        </Col>\r\n                    \r\n                </Row>\r\n\r\n                {/* If restaurantsList length > 0, show SearchResults component, otherwise don't show */}\r\n                {restaurantsList.length > 0 ? <SearchResults restaurantsList={restaurantsList} /> : null}\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;","// The component for when you click 'More information' on a specific restaurant.\r\n/* \r\n// Put all the details from business in the Details page\r\n// Add the Star ratings and Price, address, location icons to the Search Results Cards\r\n// Add the Input fields for the filters. \r\n*/\r\n\r\nimport axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, Card, Carousel, Container, Row, Tab, Table, Tabs } from 'react-bootstrap';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { GoogleApiWrapper, InfoWindow, Marker, Map } from 'google-maps-react';\r\nimport { IoIosStarHalf, IoIosStarOutline, IoIosStar } from 'react-icons/io';\r\nimport { FaDollarSign } from 'react-icons/fa';\r\nimport { MdLocalPhone, MdLocationOn } from 'react-icons/md';\r\n\r\n\r\nconst anywhere = 'https://cors-anywhere.herokuapp.com/';\r\n\r\n// Enter your own Yelp Fusion API key here\r\nconst YELP_API_KEY = 'yR15w8bu1wHsBvCaLBOTjSE19XdcT0rwnd9CUAkRENxiBHBqkfNj2sAkTx-yzkY4n146e_nXFAo43nQlwWSp3xxCHpoO8kzwBY_aE9OklcwvTEc3x3zEdUdP-epSXnYx';\r\n\r\n// Enter your own Google Maps API key here\r\nconst MAPS_API_KEY = 'AIzaSyBKkqON7yV0e9pLsxgZeoR8l917lbOEOrU';\r\n\r\nconst Details = (props) => {\r\n\r\n  // Create location object\r\n  let location = useLocation();\r\n  // Restaurant is the prop of location.state - contains the specific restaurant that was clicked on  \r\n  let [restaurant, setRestaurant] = useState(location.state.detailsObject);\r\n  let [showingInfoWindow, setShowInfoWindow] = useState(false); //Hides or the shows the infoWindow\r\n  let [activeMarker, setActiveMarker] = useState({}); //Shows the active marker upon click\r\n  let [selectedPlace, setSelectedPlace] = useState({}); //Shows the infoWindow to the selected place upon a marker\r\n\r\n\r\n  useEffect(() => {\r\n    axios.get(`${anywhere}https://api.yelp.com/v3/businesses/${restaurant.id}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${YELP_API_KEY}`\r\n      }\r\n    }).then((res) => {\r\n      // Set business array in restaurant state\r\n      console.log(\"Restaurant data: \", res.data);\r\n      setRestaurant(res.data);\r\n    }).catch((err) => {\r\n      // Otherwise catch error and log it to console\r\n      console.log(\"Error occured: \", err);\r\n    })\r\n  }, []);\r\n\r\n  // Map function to loop through sub-array categories to find type of cuisines\r\n  let Cuisines = restaurant.categories.map((item, key) =>\r\n    <span key={key}>{item.title}, </span>\r\n  );\r\n\r\n  // make sure photos exist before get request\r\n  let ImageSlide = restaurant.photos && restaurant.photos.map((item, key) =>\r\n    <Carousel.Item>\r\n      <div style={{\r\n        overflow: 'hidden',\r\n        height: '400px'\r\n\r\n      }}>\r\n        <img\r\n          className=\"d-block w-100\"\r\n          src={item}\r\n          alt=\"Restaurant\"\r\n          key={key}\r\n          style={{\r\n            backgroundPosition: 'center center'\r\n          }}\r\n        />\r\n      </div>\r\n    </Carousel.Item>\r\n  );\r\n\r\n  const onMarkerClick = (props, marker, e) => {\r\n    setSelectedPlace(props);\r\n    setActiveMarker(marker);\r\n    setShowInfoWindow(true);\r\n  }\r\n\r\n  const onClose = props => {\r\n    if (showingInfoWindow) {\r\n      setActiveMarker(null);\r\n      setShowInfoWindow(false);\r\n    }\r\n  };\r\n\r\n  const mapStyles2 = {\r\n    width: '100%',\r\n    height: \"400px\",\r\n    position: \"relative\"\r\n  };\r\n\r\n  function isFloat(n) {\r\n    return Number(n) === n && n % 1 !== 0;\r\n  }\r\n\r\n  /* Function that takes the rating and converts it to stars.\r\n     Accounts for if the rating is between a whole number and that plus 0.5,\r\n     but may not be necessary for the Yelp API.\r\n  */\r\n  const displayRating = () => {\r\n    const max = restaurant.rating;\r\n    const emptyStars = 5 - Math.ceil(max);\r\n    let stars = [];\r\n    if (isFloat(max)) {\r\n      const floor = Math.floor(max);\r\n      for (let i = 1; i <= floor; i++) {\r\n        stars.push(<IoIosStar color=\"orange\" />);\r\n      }\r\n      stars.push(<IoIosStarHalf color=\"orange\" />);\r\n    } else {\r\n      for (let i = 1; i <= max; i++) {\r\n        stars.push(<IoIosStar color=\"orange\" />);\r\n      }\r\n    }\r\n\r\n    let j = 1;\r\n    while (j <= emptyStars) {\r\n      stars.push(<IoIosStarOutline color=\"orange\" />);\r\n      j++;\r\n    }\r\n    return stars;\r\n  }\r\n\r\n  let displayHours = () => {\r\n    let hourList = [];\r\n    let day = \"\";\r\n    if (restaurant.hours && restaurant.hours[0].open) {\r\n      const hours = restaurant.hours[0].open;\r\n      if ((hours.filter(item => item.day === 0)).length > 0) {\r\n        // checking the day\r\n        day = hours.filter(item => item.day === 0);\r\n        hourList.push(\r\n          <tr>\r\n            <td>Monday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        );\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Monday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}>Closed</td>\r\n          </tr>\r\n        );\r\n      }\r\n      if ((hours.filter(item => item.day === 1)).length > 0) {\r\n        day = hours.filter(item => item.day === 1);\r\n        hourList.push(\r\n          <tr>\r\n            <td>Tuesday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        );\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Tuesday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}>Closed</td>\r\n          </tr>\r\n        );\r\n      }\r\n      if ((hours.filter(item => item.day === 2)).length > 0) {\r\n        day = hours.filter(item => item.day === 2);\r\n        hourList.push(\r\n          <tr>\r\n            <td>Wednesday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        );\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Wednesday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}>Closed</td>\r\n          </tr>\r\n        );\r\n      }\r\n      if ((hours.filter(item => item.day === 3)).length > 0) {\r\n        day = hours.filter(item => item.day === 3);\r\n        hourList.push(\r\n          <tr>\r\n            <td>Thursday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        );\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Thursday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}>Closed</td>\r\n          </tr>\r\n        );\r\n      }\r\n      if ((hours.filter(item => item.day === 4)).length > 0) {\r\n        day = hours.filter(item => item.day === 4);\r\n        hourList.push(\r\n          <tr>\r\n            <td>Friday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        );\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Friday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}>Closed</td>\r\n          </tr>\r\n        );\r\n      }\r\n      if ((hours.filter(item => item.day === 5)).length > 0) {\r\n        day = hours.filter(item => item.day === 5);\r\n        hourList.push(\r\n          <tr>\r\n            <td>Saturday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        );\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Saturday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}>Closed</td>\r\n          </tr>\r\n        );\r\n      }\r\n      if ((hours.filter(item => item.day === 6)).length > 0) {\r\n        day = hours.filter(item => item.day === 6);\r\n        hourList.push(\r\n          <tr>\r\n            <td>Sunday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        );\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Sunday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}>Closed</td>\r\n          </tr>\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Day</th>\r\n            <th>Hours</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {hourList}\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  };\r\n\r\n  const timeConvert = (time) => {\r\n    // Check correct time format and split into components\r\n    time = time.toString().match(/^([01]\\d|2[0-3])([0-5]\\d)/);\r\n    let formatedTime = '';\r\n    if (time.length > 1) { // If time format correct\r\n      formatedTime = (time[1] % 12 || 12) + \":\" + time[2] + (time[1] < 12 ? ' AM' : ' PM')\r\n    }\r\n    return formatedTime; // return adjusted time or original string\r\n  }\r\n\r\n  const displayPrice = () => {\r\n    const price = restaurant.price;\r\n    let prices = [];\r\n    if (price != null) {\r\n      prices.push(<span>Price: </span>);\r\n      for (let i = 0; i < price.length; i++) {\r\n        prices.push(<FaDollarSign color=\"green\" />);\r\n      }\r\n    }\r\n    return prices;\r\n  }\r\n\r\n  // Actual return of Details component\r\n  return (\r\n    <div>\r\n      <Container>\r\n        {/* Restaurant Images */}\r\n        <Row className=\"justify-content-md-center\">\r\n          <Card style={{\r\n            width: '100%'\r\n          }}>\r\n            <Card.Body style={{\r\n              padding: '0.5rem'\r\n            }}>\r\n              <Carousel>{ImageSlide}</Carousel>\r\n            </Card.Body>\r\n          </Card>\r\n        </Row>\r\n        <br />\r\n\r\n        {/* Google Maps */}\r\n        <Row className=\"justify-content-md-center\">\r\n          <Card style={{\r\n            width: '100%'\r\n          }}>\r\n            <Card.Header>\r\n              <center><h1>{restaurant.name}</h1></center>\r\n            </Card.Header>\r\n            <Card.Body style={{\r\n              padding: '0rem'\r\n            }}>\r\n              <Map\r\n                google={props.google}\r\n                style={mapStyles2}\r\n                containerStyle={mapStyles2}\r\n                zoom={20}\r\n                initialCenter={{\r\n                  lat: restaurant.coordinates.latitude,\r\n                  lng: restaurant.coordinates.longitude\r\n                }}\r\n              >\r\n                <Marker\r\n                  title={`${restaurant.name}`} //mouse over\r\n                  name={`${restaurant.name}`}\r\n                  onClick={onMarkerClick}\r\n                  position={{ lat: restaurant.coordinates.latitude, lng: restaurant.coordinates.longitude }}\r\n                />\r\n                <InfoWindow\r\n                  marker={activeMarker}\r\n                  visible={showingInfoWindow}\r\n                  onClose={onClose}\r\n                >\r\n                  <h4>{restaurant.name}</h4>\r\n\r\n                </InfoWindow>\r\n              </Map>\r\n            </Card.Body>\r\n          </Card>\r\n        </Row>\r\n\r\n        <Row style={{\r\n          marginTop: '16px'\r\n        }}>\r\n          <Card style={{\r\n            width: '100%'\r\n          }}>\r\n            <Card.Header>Restaurant Details</Card.Header>\r\n            <Card.Body>\r\n              <Tabs defaultActiveKey=\"general\" id=\"uncontrolled-tab-example\">\r\n                <Tab style={{\r\n                  padding: '16px'\r\n                }} eventKey=\"general\" title=\"General\">\r\n                  <p>Cuisines: {Cuisines}</p>\r\n                  {/* Some restaurants don't have price value, so don't display if this is the case */}\r\n                  <p>\r\n                    {displayPrice()}\r\n                  </p>\r\n                  <p>Rating: {displayRating()} {restaurant.review_count} reviews</p>\r\n                  <a variant=\"outline-primary\" target=\"_blank\" rel=\"noopener noreferrer\" href={restaurant.url}><Button variant=\"outline-primary\">Yelp Link</Button></a>\r\n                </Tab>\r\n                <Tab style={{\r\n                  padding: '16px'\r\n                }} eventKey=\"address\" title=\"Address/Contact\">\r\n                  <p><MdLocationOn color=\"#e53935\" /> {restaurant.location.address1 !== \"\" ? `Location: ${restaurant.location.address1}, ${restaurant.location.city}, ${restaurant.location.state} ${restaurant.location.zip_code}` : `Location: ${restaurant.location.city}, ${restaurant.location.state} ${restaurant.location.zip_code}`}</p>\r\n                  <p><MdLocalPhone color=\"#e53935\" /> <a href={`tel:${restaurant.phone}`}>{restaurant.display_phone}</a></p>\r\n                </Tab>\r\n                <Tab style={{\r\n                  padding: '16px'\r\n                }} eventKey=\"hours\" title=\"Open Hours\">\r\n                  <p>{displayHours()}</p>\r\n                </Tab>\r\n              </Tabs>\r\n\r\n            </Card.Body>\r\n          </Card>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: `${MAPS_API_KEY}`\r\n})(Details);","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport HomePage from './components/HomePage';\nimport Details from './components/Details';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n\n  return (\n  // Define the path and what component to use at the path using routes\n    <Router>\n      <Switch>\n        <Route path=\"/details\">\n          <Details />\n        </Route>\n\n        <Route path=\"/\">\n          <HomePage />\n        </Route>\n\n      </Switch>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}