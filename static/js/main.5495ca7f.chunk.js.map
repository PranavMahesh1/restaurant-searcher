{"version":3,"sources":["components/HomePage/SearchResults/index.js","components/HomePage/index.js","components/Details/index.js","components/About/index.js","App.js","serviceWorker.js","index.js"],"names":["SearchResults","props","history","useHistory","Restaurants","restaurantsList","map","item","key","Card","className","height","Img","variant","src","image_url","Body","style","Title","name","Text","location","address1","city","state","zip_code","rating","display_phone","Button","onClick","push","detailsObject","restaurantDetails","margin","Container","Row","anywhere","API_KEY","HomePage","useState","restaurant","setRestaurant","setLocation","setRestaurantsList","geoLocation","setGeoLocation","geo","navigator","geolocation","useEffect","getCurrentPosition","position","console","log","coords","latitude","longitude","err","Col","xs","Form","Group","controlId","Label","InputGroup","Prepend","id","Control","onChange","event","target","value","placeholder","axios","get","headers","Authorization","then","res","data","businesses","catch","length","GoogleApiWrapper","apiKey","useLocation","showingInfoWindow","setShowInfoWindow","activeMarker","setActiveMarker","setSelectedPlace","Cuisines","categories","title","ImageSlide","photos","Carousel","Item","overflow","alt","mapStyles2","width","timeConvert","time","formatedTime","toString","match","google","containerStyle","zoom","initialCenter","lat","coordinates","lng","marker","e","visible","onClose","marginTop","Header","Tabs","defaultActiveKey","Tab","padding","eventKey","price","n","max","emptyStars","Math","ceil","stars","Number","floor","i","color","j","displayRating","rel","href","url","hourList","day","hours","open","filter","start","end","Table","striped","bordered","hover","displayHours","About","Media","type","Check","label","App","path","Boolean","window","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5495ca7f.chunk.js","sourcesContent":["// The component that appears when you click 'Submit' on the main page.\r\n\r\nimport React, { } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Container, Row, Button, Card } from 'react-bootstrap';\r\nimport './style.css';\r\n\r\nconst SearchResults = (props) => {\r\n    let history = useHistory();\r\n\r\n    function restaurantDetails(item) {\r\n        history.push('/details', {\r\n            // Link to /details and pass in detailsObject/item as a prop\r\n            detailsObject: item\r\n        });\r\n    }\r\n\r\n    // Map function to loop through the array of items and displays a card for each restaurant\r\n    let Restaurants = props.restaurantsList.map((item, key) =>\r\n        <Card key={key} className=\"card-margin\" height=\"300\">\r\n            <Card.Img variant=\"top\" src={item.image_url} height=\"250\"/>\r\n            <Card.Body style={{\r\n                height: '240'\r\n            }}>\r\n                <Card.Title>{item.name}</Card.Title>\r\n                <Card.Text>\r\n                    Location: {item.location.address1}, {item.location.city}, {item.location.state} {item.location.zip_code}\r\n                </Card.Text>\r\n                <Card.Text>Rating: {item.rating} / 5</Card.Text>\r\n                <Card.Text>Phone: {item.display_phone}</Card.Text>\r\n                {/* Make sure in most cases that the button will align \r\n                to the bottom and won't cover up phone number */}\r\n            </Card.Body>\r\n            <Button onClick={\r\n                    () => {\r\n                        restaurantDetails(item);\r\n                    }} variant=\"success\" style={{\r\n                        margin: '4px'\r\n                    }}>More information</Button>\r\n        </Card>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <br />\r\n            <Container>\r\n                {/* Center row */}\r\n                <Row className=\"justify-content-md-center\">\r\n                    {/* The cards that will display the restaurant information */}\r\n                    {Restaurants}\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchResults;","// The component for the home page.\r\n// TODO: add navbar, about, add icons, icon to search\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Container, Row, Col, Form, Button, InputGroup } from 'react-bootstrap';\r\nimport SearchResults from './SearchResults';\r\nimport { MdRestaurant, MdLocationCity } from \"react-icons/md\";\r\nimport axios from 'axios';\r\nimport './style.css';\r\n\r\nconst anywhere = 'https://cors-anywhere.herokuapp.com/';\r\n\r\n// Enter your own Yelp Fusion API key here\r\nconst API_KEY = 'yR15w8bu1wHsBvCaLBOTjSE19XdcT0rwnd9CUAkRENxiBHBqkfNj2sAkTx-yzkY4n146e_nXFAo43nQlwWSp3xxCHpoO8kzwBY_aE9OklcwvTEc3x3zEdUdP-epSXnYx';\r\n\r\n// Function for the homepage\r\nconst HomePage = (props) => {\r\n    // Define states\r\n    let [restaurant, setRestaurant] = useState(\"\");\r\n    let [location, setLocation] = useState(\"\");\r\n    let [restaurantsList, setRestaurantsList] = useState([]);\r\n    let [geoLocation, setGeoLocation] = useState({});\r\n    const geo = navigator.geolocation;\r\n    let getLocation = () => {\r\n        if (!geo) {\r\n            console.log(\"Location API is not supported/available\");\r\n        } else {\r\n            geo.getCurrentPosition((position) => {\r\n                // success callback\r\n                console.log(\"Location: \", position.coords.latitude, position.coords.longitude);\r\n                setGeoLocation(position.coords);\r\n            }, (err) => {\r\n\r\n            })\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getLocation();\r\n    }, []);\r\n\r\n    // Set the restaurant text in the restaurant state\r\n    const onChangeRestaurant = (event) => {\r\n        setRestaurant(event.target.value);\r\n    }\r\n\r\n    // Set the location text in the location state\r\n    const onChangeLocation = (event) => {\r\n        setLocation(event.target.value);\r\n    }\r\n\r\n    const searchGeoRestaurant = (event) => {\r\n        // Send a GET request to the Yelp API and filter businesses to food\r\n        axios.get(`${anywhere}https://api.yelp.com/v3/businesses/search?term=${restaurant}&categories=food&latitude=${geoLocation.latitude}&longitude=${geoLocation.longitude}&radius=15000`, {\r\n            headers: {\r\n                Authorization: `Bearer ${API_KEY}`\r\n            }\r\n        }).then((res) => {\r\n            // Set business array in restaurantsList state\r\n            setRestaurantsList(res.data.businesses);\r\n        }).catch((err) => {\r\n            // Otherwise catch error and log it to console\r\n            console.log(\"Error occured: \", err);\r\n        })\r\n    }\r\n\r\n    const searchRestaurant = (event) => {\r\n        // Send a GET request to the Yelp API and filter businesses to food\r\n        axios.get(`${anywhere}https://api.yelp.com/v3/businesses/search?term=${restaurant}&categories=food&location=${location}&offset=51&limit=50`, {\r\n            headers: {\r\n                Authorization: `Bearer ${API_KEY}`\r\n            }\r\n        }).then((res) => {\r\n            // Set business array in restaurantsList state\r\n            setRestaurantsList(res.data.businesses);\r\n        }).catch((err) => {\r\n            // Otherwise catch error and log it to console\r\n            console.log(\"Error occured: \", err);\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Row className=\"justify-content-md-center\">\r\n                    <Col xs=\"6\">\r\n                        <h1 className=\"heading\">Restaurant-Searcher</h1>\r\n                        {/* Form for entering Restaurant Name and Location */}\r\n                        <Form>\r\n                            <Form.Group controlId=\"basic\">\r\n                                <Form.Label className=\"text\">Enter Restaurant</Form.Label>\r\n                                {/* When Form text changes, call onChangeRestaurant() */}\r\n                                <InputGroup>\r\n                                    <InputGroup.Prepend>\r\n                                        <InputGroup.Text id=\"inputGroupPrepend\"><MdRestaurant /></InputGroup.Text>\r\n                                    </InputGroup.Prepend>\r\n                                    <Form.Control onChange={onChangeRestaurant} placeholder=\"Restaurant\" />\r\n                                </InputGroup>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"basic\">\r\n                                <Form.Label className=\"text\">Enter Location</Form.Label>\r\n                                {/* When Form text changes, call onChangeLocation() */}\r\n                                <InputGroup>\r\n                                    <InputGroup.Prepend>\r\n                                        <InputGroup.Text id=\"inputGroupPrepend\"><MdLocationCity /></InputGroup.Text>\r\n                                    </InputGroup.Prepend>\r\n                                <Form.Control onChange={onChangeLocation} placeholder=\"Location (i.e. Atlanta, GA)\" />\r\n                            </InputGroup>\r\n                            </Form.Group>\r\n                        </Form>\r\n\r\n                        {/* When button is pressed, call searchRestaurant() */}\r\n                        <Button variant=\"light\" onClick={searchRestaurant}>Submit</Button>\r\n                        <Button variant=\"light\" onClick={searchGeoRestaurant} className=\"float-right\">Submit with Your Location</Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {/* If restaurantsList length > 0, show SearchResults component, otherwise don't show */}\r\n                {restaurantsList.length > 0 ? <SearchResults restaurantsList={restaurantsList} /> : null}\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;","// The component for when you click 'More information' on a specific restaurant.\r\n// alphabetical order\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Container, Row, Carousel, Card, Tab, Tabs, Table, Button } from 'react-bootstrap';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\r\nimport axios from 'axios';\r\nimport { IoIosStar, IoIosStarHalf, IoIosStarOutline } from 'react-icons/io';\r\n\r\n\r\nconst anywhere = 'https://cors-anywhere.herokuapp.com/';\r\n\r\n// Enter your own Yelp Fusion API key here\r\nconst API_KEY = 'yR15w8bu1wHsBvCaLBOTjSE19XdcT0rwnd9CUAkRENxiBHBqkfNj2sAkTx-yzkY4n146e_nXFAo43nQlwWSp3xxCHpoO8kzwBY_aE9OklcwvTEc3x3zEdUdP-epSXnYx';\r\n\r\nconst Details = (props) => {\r\n\r\n  // Create location object\r\n  let location = useLocation();\r\n  // Restaurant is the prop of location.state - contains the specific restaurant that was clicked on  \r\n  let [restaurant, setRestaurant] = useState(location.state.detailsObject);\r\n  let [showingInfoWindow, setShowInfoWindow] = useState(false); //Hides or the shows the infoWindow\r\n  let [activeMarker, setActiveMarker] = useState({}); //Shows the active marker upon click\r\n  let [selectedPlace, setSelectedPlace] = useState({}); //Shows the infoWindow to the selected place upon a marker\r\n\r\n\r\n  useEffect(() => {\r\n    axios.get(`${anywhere}https://api.yelp.com/v3/businesses/${restaurant.id}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${API_KEY}`\r\n      }\r\n    }).then((res) => {\r\n      // Set business array in restaurant state\r\n      console.log(\"Restaurant data: \", res.data);\r\n      setRestaurant(res.data);\r\n    }).catch((err) => {\r\n      // Otherwise catch error and log it to console\r\n      console.log(\"Error occured: \", err);\r\n    })\r\n  }, []);\r\n\r\n  console.log(\"Restaurant: \", restaurant);\r\n  // Map function to loop through sub-array categories to find type of cuisines\r\n  let Cuisines = restaurant.categories.map((item, key) =>\r\n    <span key={key}>{item.title}, </span>\r\n  );\r\n\r\n  // make sure photos exist before get request\r\n  let ImageSlide = restaurant.photos && restaurant.photos.map((item, key) =>\r\n    <Carousel.Item>\r\n      <div style={{\r\n        overflow: 'hidden',\r\n        height: '400px'\r\n\r\n      }}>\r\n        <img\r\n          className=\"d-block w-100\"\r\n          src={item}\r\n          alt=\"Restaurant\"\r\n          key={key}\r\n        />\r\n      </div>\r\n    </Carousel.Item>\r\n  );\r\n\r\n  const onMarkerClick = (props, marker, e) => {\r\n    setSelectedPlace(props);\r\n    setActiveMarker(marker);\r\n    setShowInfoWindow(true);\r\n  }\r\n\r\n  const onClose = props => {\r\n    if (showingInfoWindow) {\r\n      setActiveMarker(null);\r\n      setShowInfoWindow(false);\r\n    }\r\n  };\r\n\r\n  const mapStyles2 = {\r\n    width: '100%',\r\n    height: \"400px\",\r\n    position: \"relative\"\r\n  };\r\n\r\n  function isFloat(n) {\r\n    return Number(n) === n && n % 1 !== 0;\r\n  }\r\n\r\n\r\n  const displayRating = () => {\r\n    const max = restaurant.rating;\r\n    const emptyStars = 5 - Math.ceil(max);\r\n    let stars = [];\r\n    if (isFloat(max)) {\r\n      const floor = Math.floor(max);\r\n      for (let i = 1; i <= floor; i++) {\r\n        stars.push(<IoIosStar color=\"orange\" />);\r\n      }\r\n      stars.push(<IoIosStarHalf color=\"orange\" />);\r\n    } else {\r\n      for (let i = 1; i <= max; i++) {\r\n        stars.push(<IoIosStar color=\"orange\" />);\r\n      }\r\n    }\r\n\r\n    let j = 1;\r\n    while (j <= emptyStars) {\r\n      stars.push(<IoIosStarOutline color=\"orange\" />);\r\n      j++;\r\n    }\r\n    console.log(\"Stars \", stars);\r\n    return stars;\r\n  }\r\n\r\n  let displayHours = () => {\r\n    let hourList = [];\r\n    let day = \"\";\r\n    if (restaurant.hours && restaurant.hours[0].open) {\r\n      const hours = restaurant.hours[0].open;\r\n      if ((hours.filter(item => item.day === 0)).length > 0) {\r\n        // checking the day\r\n        day = hours.filter(item => item.day === 0);\r\n        hourList.push(\r\n          <tr>\r\n            <td>Monday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        );\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Monday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}>Closed</td>\r\n          </tr>\r\n        );\r\n      }\r\n      if ((hours.filter(item => item.day === 1)).length > 0) {\r\n        day = hours.filter(item => item.day === 1);\r\n        hourList.push(\r\n          <tr>\r\n            <td>Tuesday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        );\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Tuesday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}>Closed</td>\r\n          </tr>\r\n        );\r\n      }\r\n      if ((hours.filter(item => item.day === 2)).length > 0) {\r\n        day = hours.filter(item => item.day === 2);\r\n        hourList.push(\r\n          <tr>\r\n            <td>Wednesday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        );\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Wednesday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}>Closed</td>\r\n          </tr>\r\n        );\r\n      }\r\n      if ((hours.filter(item => item.day === 3)).length > 0) {\r\n        day = hours.filter(item => item.day === 3);\r\n        hourList.push(\r\n          <tr>\r\n            <td>Thursday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        );\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Thursday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}>Closed</td>\r\n          </tr>\r\n        );\r\n      }\r\n      if ((hours.filter(item => item.day === 4)).length > 0) {\r\n        day = hours.filter(item => item.day === 4);\r\n        hourList.push(\r\n          <tr>\r\n            <td>Friday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        );\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Friday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}>Closed</td>\r\n          </tr>\r\n        );\r\n      }\r\n      if ((hours.filter(item => item.day === 5)).length > 0) {\r\n        day = hours.filter(item => item.day === 5);\r\n        hourList.push(\r\n          <tr>\r\n            <td>Saturday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        );\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Saturday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}>Closed</td>\r\n          </tr>\r\n        );\r\n      }\r\n      if ((hours.filter(item => item.day === 6)).length > 0) {\r\n        day = hours.filter(item => item.day === 6);\r\n        hourList.push(\r\n          <tr>\r\n            <td>Sunday</td>\r\n            <td>{timeConvert(day[0].start)} - {timeConvert(day[0].end)}</td>\r\n          </tr>\r\n        );\r\n      } else {\r\n        hourList.push(\r\n          <tr>\r\n            <td>Sunday</td>\r\n            <td style={{\r\n              color: 'red'\r\n            }}>Closed</td>\r\n          </tr>\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Day</th>\r\n            <th>Hours</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {hourList}\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  };\r\n\r\n  const timeConvert = (time) => {\r\n    // Check correct time format and split into components\r\n    time = time.toString().match(/^([01]\\d|2[0-3])([0-5]\\d)/);\r\n    let formatedTime = '';\r\n    if (time.length > 1) { // If time format correct\r\n      formatedTime = (time[1] % 12 || 12) + \":\" + time[2] + (time[1] < 12 ? ' AM' : ' PM')\r\n    }\r\n    return formatedTime; // return adjusted time or original string\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        {/* Restaurant Images */}\r\n        <Row className=\"justify-content-md-center\">\r\n          <Carousel>{ImageSlide}</Carousel>\r\n        </Row>\r\n        <br />\r\n\r\n        {/* Restaurant Title */}\r\n        <Row className=\"justify-content-md-center\">\r\n          <h1 className=\"heading\">{restaurant.name}</h1>\r\n        </Row>\r\n\r\n        {/* Google Maps */}\r\n        <Row className=\"justify-content-md-center\">\r\n        <Card style={{\r\n            width: '100%'\r\n          }}>\r\n            <Card.Body>\r\n          <Map\r\n            google={props.google}\r\n            style={mapStyles2}\r\n            containerStyle={mapStyles2}\r\n            zoom={20}\r\n            initialCenter={{\r\n              lat: restaurant.coordinates.latitude,\r\n              lng: restaurant.coordinates.longitude\r\n            }}\r\n          >\r\n            <Marker\r\n              title={'The marker`s title will appear as a tooltip.'} //mouse over\r\n              name={'SOMA'}\r\n              onClick={onMarkerClick}\r\n              position={{ lat: restaurant.coordinates.latitude, lng: restaurant.coordinates.longitude }}\r\n            />\r\n            <InfoWindow\r\n              marker={activeMarker}\r\n              visible={showingInfoWindow}\r\n              onClose={onClose}\r\n            >\r\n              <h4>{restaurant.name}</h4>\r\n\r\n            </InfoWindow>\r\n          </Map>\r\n          </Card.Body>\r\n          </Card>\r\n        </Row>\r\n\r\n        <Row style={{\r\n          marginTop: '16px'\r\n        }}>\r\n          <Card style={{\r\n            width: '100%'\r\n          }}>\r\n            <Card.Header>Restaurant Details</Card.Header>\r\n            <Card.Body>\r\n              <Tabs defaultActiveKey=\"general\" id=\"uncontrolled-tab-example\">\r\n                <Tab style={{\r\n                  padding: '16px'\r\n                }} eventKey=\"general\" title=\"General\">\r\n                  <p>Cuisines: {Cuisines}</p>\r\n                  {/* Some restaurants don't have price value, so don't display if this is the case */}\r\n                  <p>{restaurant.price != null ? `Price: ${restaurant.price}` : null}</p>\r\n                  <p>Rating: {displayRating()}</p>\r\n                  <a variant=\"outline-primary\" target=\"_blank\" rel=\"noopener noreferrer\" href={restaurant.url}><Button variant=\"outline-primary\">Primary</Button></a>\r\n                </Tab>\r\n                <Tab style={{\r\n                  padding: '16px'\r\n                }} eventKey=\"address\" title=\"Address/Contact\">\r\n                  <p>Address: {restaurant.location.address1}, {restaurant.location.city}, {restaurant.location.state} {restaurant.location.zip_code}</p>\r\n                  <p>Phone number: {restaurant.display_phone}</p>\r\n                </Tab>\r\n                <Tab style={{\r\n                  padding: '16px'\r\n                }} eventKey=\"hours\" title=\"Open Hours\">\r\n                  <p>{displayHours()}</p>\r\n                </Tab>\r\n              </Tabs>\r\n\r\n            </Card.Body>\r\n          </Card>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyBKkqON7yV0e9pLsxgZeoR8l917lbOEOrU'\r\n})(Details);","import React, {  } from 'react';\r\nimport { Container, Row, Col, Media, Form, Button } from 'react-bootstrap';\r\nimport './style.css';\r\n\r\nconst About = (props) => {\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <Media>\r\n                            <img alt=\"logo\" className=\"img-margin\" src=\"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\" />\r\n                            <Media.Body>\r\n                                <h1>About Restaurant-Searcher</h1>\r\n                                <p>Description of me. This app finds restaurants using Google Maps and Yelp Fusion API. Github link: </p>\r\n                            </Media.Body>\r\n                        </Media>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className=\"justify-content-md-center\">\r\n                    <Col xs=\"6\">\r\n                        <Form>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                <Form.Label>Email address</Form.Label>\r\n                                <Form.Control type=\"email\" placeholder=\"Enter email\" />\r\n                                <Form.Text className=\"text-muted\">\r\n                                    We'll never share your email with anyone else.\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"formBasicPassword\">\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control type=\"password\" placeholder=\"Password\" />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"formBasicCheckbox\">\r\n                                <Form.Check type=\"checkbox\" label=\"Check me out\" />\r\n                            </Form.Group>\r\n\r\n                            <Button variant=\"primary\" type=\"submit\">\r\n                                Submit\r\n                    </Button>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport HomePage from './components/HomePage';\nimport Details from './components/Details';\nimport About from './components/About';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n\n  return (\n  // Define the path and what component to use at the path using routes\n    <Router>\n      <Switch>\n        <Route path=\"/details\">\n          <Details />\n        </Route>\n\n        <Route path=\"/about\">\n          <About />\n        </Route>\n\n        <Route path=\"/\">\n          <HomePage />\n        </Route>\n\n      </Switch>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}